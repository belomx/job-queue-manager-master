cmdhistory=["(get-agents agent-store)" "(->AgentStore 123 \\"Ronaldo\\" [\\"bills-questions\\"] [] )" "(->JobStore 456 \\"bills-questions\\" false \:queued nil)" "(->Job 456 \\"bills-questions\\" false \:queued nil)" "(->Agent 123 \\"Ronaldo\\" [\\"bills-questions\\"] [])" "(->Job 456 \\"bills-questions\\" false (Date.) \:queued nil)" "(get-agents agent-store)" "(put-agent\! agent-store (->Agent 123 \\"Ronaldo\\" [\\"bills-questions\\"] []))" "(get-agents agent-store)" "(put-agent\! agent-store (->Agent 123 \\"Ronaldo\\" [\\"bills-questions\\"] []))" "(get-agents agent-store)" "(get-jobs job-store)" "(map \:urgent (get-jobs job-store))" "(map \:urgent \:id (get-jobs job-store))" "(map [\:urgent] (get-jobs job-store))" "(map (\:urgent) (get-jobs job-store))" "(map {\:urgent} (get-jobs job-store))" "(map \#(\:urgent true) (get-jobs job-store))" "(map \#(\= \:urgent true) (get-jobs job-store))" "(map \#(\:urgent %) (get-jobs job-store))" "(map (fn [[id type urgent entry-date status working-agent]] {id type urgent entry-date status working-agent}) (get-jobs job-store))" "(get {\:urgent true} (get-jobs job-store))" "(filter \:urgent (get-jobs job-store))" "(filter \#(\= \:urgent true) (get-jobs job-store))" "(filter \:urgent (get-jobs job-store))" "(filter \#(\:urgent %) (get-jobs job-store))" "(filter \#(\= \:status \:queued) (get-jobs job-store))" "(filter \#(\= (\:status %) \:queued) (get-jobs job-store))" "(sort \#(compare (last (\:entry-date %1)) (last (\:entry-date %2))) (get-jobs job-store))" "(compare (Date. 123) (Date. 456))" "(sort \#(compare (\:entry-date %1) (\:entry-date %2)) (get-jobs job-store))" "(get-urgent-jobs (get-jobs job-store))" "(get-not-urgent-jobs (get-jobs job-store))" "(get-agent-by-id (get-agents agent-store) 123)" "(\:primary-skillset *1)" "(get-urgent-jobs (get-jobs job-store))" "(for [x [1 2 3]] (println x))" "(for [x [1 2 3]] x)" "(get-job-by-skillset (get-jobs job-store) (\:primary-skillset (get-agent-by-id 123)))" "(\:primary-skillset (get-agent-by-id 123))" "(get-job-by-skillset (get-jobs job-store) (\:primary-skillset (get-agent-by-id (get-agents agent-store) 123)))" "(get-jobs-by-secundaryskillset-agent (get-jobs job-store) (get-agent-by-id 123))" "(get-jobs-by-secundaryskillset-agent (get-jobs job-store) (get-agent-by-id (get-agents agent-store) 123))" "(get-jobs-by-primaryskillset-agent (get-jobs job-store) (get-agent-by-id (get-agents agent-store) 123))" "{\:id 123 \:status \:queued}" "(update *1 \:status \:working)" "(assign-job-to-agent (first (get-jobs job-store)) (first (get-agents agent-store)))" "(update (first (get-jobs job-store)) \:status \:working)" " (update (first (get-jobs job-store)) \:status (\:working))" " (update (first (get-jobs job-store)) \:status '\:working)" "(first (get-jobs job-store))" "(update-in (first (get-jobs job-store)) \:status \:working)" "(update-in (first (get-jobs job-store)) [\:status] \:working)" "(update-in (first (get-jobs job-store)) [\:name] \\"Xablau\\")" "(update-in (first (get-jobs job-store)) [\:type] \\"Xablau\\")" " (update-in (first (get-jobs job-store)) [\:type] (\\"Xablau\\"))" " (update-in (first (get-jobs job-store)) [\:type] assoc \\"Xablau\\")" "(swap\! (first (get-jobs job-store)) assoc-in [\:id 123] {\:status \:working})" "(update-job\! job-store (first (get-jobs job-store)) (first (get-agents agent-store)))" "(atom (->Job 456  \\"bills-questions\\" false (Date.) \:queued nil))" "(get-jobs job-store)" "(update-job\! job-store (first (get-jobs job-store)) (first (get-agents agent-store)) )" "(first (get-jobs job-store))" "(get-jobs job-store)" "(update-job\! job-store (first (get-jobs job-store)) (first (get-agents agent-store)))" "(first (get-jobs job-store))" "(get-jobs job-store)" "(update-job\! job-store (first (get-jobs job-store)) (first (get-agents agent-store)))" "(update-job\! (first (get-jobs job-store)) (first (get-agents agent-store)))" "(get-jobs job-store)" "(remove \#(\= (\:id %) 456) (get-jobs job-store))" "(get-jobs job-store)" "(swap\! (\:data job-store) update-in [\:jobs] remove \#(\= (\:id %) 456))" "(update-job\! job-store (first (get-jobs job-store)) (first (get-agents agent-store)))" "(swap\! (\:data job-store) update-in [\:jobs] remove \#(\= (\:id %) 456))" "(swap\! (\:data job-store) update-in [\:jobs] rest)" "(get-jobs job-store)" "(put-job\! job-store (->Job 456  \\"bills-questions\\" false (Date.) \:queued nil))" "(put-job\! job-store (->Job 542 \\"bills-questions\\" true (Date.) \:queued nil))" "(put-job\! job-store (->Job 731 \\"rewards-question\\" false (Date.) \:queued nil))" "(get-jobs job-store)" "(swap\! (\:data job-store) update-in [\:jobs] rest)" "(swap\! (\:data job-store) update-in [\:jobs] remove (\#(\= (\:id %) 456)))" "(swap\! (\:data job-store) update-in [\:jobs] remove (fn [x] (\= (\:id x) 456)))" "(swap\! (\:data job-store) update-in [\:jobs \#(\= (\:id %) 456)] remove)" "(swap\! (\:data job-store) update-in [\:jobs] remove (fn [x] (\= (\:id x) 456)) %)" "(swap\! (\:data job-store) update-in [\:jobs] remove (fn [x] (\= (\:id x) 456)))" "(get-jobs job-store)" "(put-job\! job-store (->Job 456  \\"bills-questions\\" false (Date.) \:queued nil))" "(put-job\! job-store (->Job 542 \\"bills-questions\\" true (Date.) \:queued nil))" "(put-job\! job-store (->Job 731 \\"rewards-question\\" false (Date.) \:queued nil))" "(assoc-in (\:data job-store) [1 \:type] \:working)" "(swap\! (\:data job-store) assoc-in [1 \:type] \:working)" "(swap\! (\:data job-store) assoc-in [[\:jobs [1]] \:type] \:working)" "(swap\! (\:data job-store) assoc-in [\:jobs \:type] \:working)" "(swap\! (\:data job-store) assoc-in [\:jobs] \:working)" "(get-jobs job-store)" "(def job-store (->AtomStore (atom {\:jobs '()})))" "(get-jobs job-store)" "(put-job\! job-store (->Job 456  \\"bills-questions\\" false (Date.) \:queued nil))" "(put-job\! job-store (->Job 542 \\"bills-questions\\" true (Date.) \:queued nil))" "(put-job\! job-store (->Job 731 \\"rewards-question\\" false (Date.) \:queued nil))" "(swap\! (\:data job-store) assoc-in [\:jobs \:id] 999)" "(swap\! (\:data job-store) assoc-in [\:id \:jobs] 999)" "(swap\! (get-jobs job-store) assoc-in [\:jobs \:id] 999)" "(swap\! @(\:data job-store) assoc-in [\:jobs \:id] 999)" "(swap\! @(\:data job-store) assoc-in [\:jobs] 999)" "(swap\! @(\:data job-store) assoc-in [\:id] 999)" "(swap\! assoc-in @(\:data job-store) [\:id] 999)" "(swap\! (\:data job-store) assoc-in [\:id] 999)" "(swap\! (\:data job-store) update-in [\:jobs \:id] 999)" "(get-jobs job-store)" "(update (first (get-jobs job-store)) \:status \#(\:working))" "(update (first (get-jobs job-store)) \:status \:working)" "(update (first (get-jobs job-store)) \:status \#((quote \:working)))" "(update (first (get-jobs job-store)) \:status '(\:working))" "(update (first (get-jobs job-store)) \:status (quote \:working))" "(quote \:working)" "(update (first (get-jobs job-store)) \:status (keyword \:working))" " (assoc (first (get-jobs job-store)) \:status \:working)" "(swap\! (\:data job-store) update-in [\:jobs]\\r\\n (fn [jobs]\\r\\n   (let [new-jobs '()]\\r\\n     (for [j jobs]     \\r\\n  \\t   (if (\= (\:id j) 456)\\r\\n\\t     (conj new-jobs (assoc (first (get-jobs job-store)) \:status \:working))\\r\\n\\t\\t (conj new-jobs j))))))" "(swap\! (\:data store)\\r\\n            update-in [\:jobs] '() )" "(swap\! (\:data job-store)\\r\\n            update-in [\:jobs] '() )" "(swap\! (\:data job-store)\\r\\n            update-in [\:jobs] \#( '() ) )" "(swap\! (\:data store)\\r\\n            update-in [\:jobs] '(%) )" "(swap\! (\:data job-store)\\r\\n            update-in [\:jobs] '(%) )" "(swap\! (\:data job-store)\\r\\n               update-in [\:jobs] (list ()))" "(swap\! (\:data job-store)\\r\\n               update-in [\:jobs] '(list) )" "(assoc (assoc (first (get-jobs job-store)) \:status \:working) \:working-agent-id 123)" "(assoc (first (get-jobs job-store)) \:status \:working)" "(swap\! (assoc (assoc (first (get-jobs job-store)) \:status \:working) \:working-agent-id 123))" "(first (get-jobs job-store))" "(swap\! assoc (first (get-jobs job-store)) \:status \:working)" "(assoc (first (get-jobs job-store)) \:status \:working)" "(get-jobs job-store)" "(assoc (assoc (first (get-jobs job-store)) \:status \:working) \:working-agent-id 123)" "(swap\! (\:data job-store) update-in [\:jobs]  (fn [x] (remove \#(\= (\:id x) 456) x)))" "(swap\! (\:data job-store) update-in [\:jobs] remove (fn [x y] (\= (\:id x) 456)))" "(get-jobs job-store)" "(put-job\! job-store (->Job 456  \\"bills-questions\\" false (Date.) \:queued nil))\\r\\n(put-job\! job-store (->Job 542 \\"bills-questions\\" true (Date.) \:queued nil))\\r\\n(put-job\! job-store (->Job 731 \\"rewards-question\\" false (Date.) \:queued nil))" "(get-jobs job-store)" "(swap\! (\:data job-store) update-in [\:jobs]  (fn [x y] (remove \#(\= (\:id x) 456) x)))" "(swap\! (\:data job-store) update-in [\:jobs]  (fn [x] (remove \#(\= (\:id x) 456) x)) (first (get-jobs job-store)))" "(swap\! (\:data job-store) update-in [\:jobs]  (fn [x] (remove \#(\= (\:id %) 456) x)) (first (get-jobs job-store)))" "(swap\! (\:data job-store) update-in [\:jobs]  (fn [x] (remove \#(\= (\:id x) 456) x)))" "(def job-store (->AtomStore (atom {\:jobs '()})))" "(put-job\! job-store (->Job 456  \\"bills-questions\\" false (Date.) \:queued nil))\\r\\n(put-job\! job-store (->Job 542 \\"bills-questions\\" true (Date.) \:queued nil))\\r\\n(put-job\! job-store (->Job 731 \\"rewards-question\\" false (Date.) \:queued nil))" "(get-jobs job-store)" "(sort-jobs-by-date (get-jobs job-store))" "(first (get-jobs job-store))" "(assoc (assoc (first (get-jobs job-store)) \:status \:working) \:working-agent-id 123)" "(swap\! (assoc (assoc (first (get-jobs job-store)) \:status \:working) \:working-agent-id 123))" "(assoc (first (get-jobs job-store)) \:status \:working)" "(swap\! (first (get-jobs job-store)) assoc \:status \:working)" "(first (get-jobs job-store))" "(put-agent\! (first (get-jobs job-store)) (first (get-agents agent-store)))" "((get-agents agent-store) (first (get-jobs job-store)) (first (get-agents agent-store)))" "(update-job\! (first (get-jobs job-store)) (first (get-agents agent-store)))" "(swap\! (first (get-jobs job-store)) assoc \:status \:working)" "(update-job\! (first (get-jobs job-store)))" "(get-jobs job-store)" "(first (get-jobs job-store))" "(update-job\! (first (get-jobs job-store)))" "(get-jobs job-store)" "(first (get-jobs job-store))" "(assign-job-to-agent\! (get-jobs job-store) (first (get-agents agent-store)))" "(assign-job-to-agent\! (get-jobs job-store))" "(assign-job-to-agent\! (first (get-jobs job-store)))" "(first (get-jobs job-store))" "(assign-job-to-agent\! (first (get-jobs job-store)))" "(update-job\! (first (get-jobs job-store)))" "(update-job\! (->Job 731 \\"rewards-question\\" false (Date.) \:queued nil))" "(assign-job-to-agent\! (first (get-jobs job-store)) (first (get-agents agent-store)))" "(get-sorted-jobs-tobe-assigned (get-jobs job-store))" "(get-jobs job-store)" "(sort-jobs-by-date (get-jobs job-store))" "(first (sort-jobs-by-date (get-jobs job-store)))" "(last (sort-jobs-by-date (get-jobs job-store)))" "(get-not-urgent-jobs (get-jobs job-store))" "(get-jobs-by-urgency (get-jobs job-store) false?)" "(filter \#(false? (\:urgent %)) (get-jobs job-store))" "(first (get-jobs job-store))" "(\:urgent (first (get-jobs job-store)))" "(let [urgent-jobs (get-urgent-jobs jobs)]\\r\\n    (if-not (empty? urgent-jobs) (println \\"xablau\\") (println \\"ronaldo\\")))" "(let [urgent-jobs (get-urgent-jobs (get-jobs job-store))]\\r\\n       (if-not (empty? urgent-jobs) (println \\"xablau\\") (println \\"ronaldo\\")))" "(get-urgent-jobs (get-jobs job-store))" "(get-jobs job-store)" "(get-urgent-jobs (get-jobs job-store))" "(get-jobs job-store)" "(get-jobs-by-urgency (get-jobs job-store) true?)" "(filter \#(true? (\:urgent %)) (get-jobs job-store))" "(\:urgent (first (get-jobs job-store)))" "(get-queued-jobs (get-jobs job-store))" "(get-jobs job-store)" "(get-sorted-jobs-tobe-assigned (get-jobs job-store))" "(assign-job-to-agent\! (fisrt (get-jobs job-store)) (first (get-agents agent-store)))" "(assign-job-to-agent\! (first (get-jobs job-store)) (first (get-agents agent-store)))" "(get-sorted-jobs-tobe-assigned (get-jobs job-store))" "(get-jobs job-store)" "(put-job\! job-store (atom \:job (->Job 731 \\"rewards-question\\" false (Date. 789) \:queued nil)))" "(put-job\! job-store (atom {\:job (->Job 731 \\"rewards-question\\" false (Date. 789) \:queued nil)}))" "(first (get-sorted-jobs-tobe-assigned (get-jobs job-store)))" "(map \#((assoc % \:status \:working)\\r\\n         %)\\r\\n      (first (get-sorted-jobs-tobe-assigned (get-jobs job-store))))" "(first (get-sorted-jobs-tobe-assigned (get-jobs job-store)))" "(map \#((assoc % \:status \:working)) (first (get-sorted-jobs-tobe-assigned (get-jobs job-store))))" "(map \#((assoc % \:status \:working)) (get-sorted-jobs-tobe-assigned (get-jobs job-store)))" "(map \#(assoc % \:status \:working) (get-sorted-jobs-tobe-assigned (get-jobs job-store)))" "(get-sorted-jobs-tobe-assigned (get-jobs job-store))" "(swap\! (get-sorted-jobs-tobe-assigned (get-jobs job-store)) (fn [jobs] (map \#(assoc % \:status \:working) jobs)))" "(swap\! job-store (fn [jobs] (map \#(assoc % \:status \:working) jobs)))" "(swap\! (\:jobs job-store) (fn [jobs] (map \#(assoc % \:status \:working) jobs)))" "(swap\! (\:data job-store) (fn [jobs] (map \#(assoc % \:status \:working) jobs)))" "(\:data job-store)" "(\:job job-store)" "(\:jobs job-store)" "(swap\! (\:data job-store) (fn [jobs] (map \#(assoc % \:status \:working) jobs)))" "(swap\! job-store (fn [jobs] (map \#(assoc % \:status \:working) jobs)))" "(get-jobs job-store)" "(put-job\! job-store (->Job 456  \\"bills-questions\\" false (Date. 123) \:queued nil))\\r\\n(put-job\! job-store (->Job 542 \\"bills-questions\\" true (Date. 456) \:queued nil))\\r\\n(put-job\! job-store (->Job 731 \\"rewards-question\\" false (Date. 789) \:queued nil))" "(def job-store (->AtomStore (atom {\:jobs '()})))" "(put-job\! job-store (->Job 456  \\"bills-questions\\" false (Date. 123) \:queued nil))\\r\\n(put-job\! job-store (->Job 542 \\"bills-questions\\" true (Date. 456) \:queued nil))\\r\\n(put-job\! job-store (->Job 731 \\"rewards-question\\" false (Date. 789) \:queued nil))" "(swap\! job-store (fn [jobs] (map \#(assoc % \:status \:working) jobs)))" "(get-jobs job-store)" "(job-store)" "job-store" "(\:data job-store)" "(swap\! (\:data job-store) (fn [jobs] (map \#(assoc % \:status \:working) jobs)))" "(get-jobs job-store)" "(def job-store (->AtomStore (atom {\:jobs '()})))" "(put-job\! job-store (->Job 456  \\"bills-questions\\" false (Date. 123) \:queued nil))\\r\\n(put-job\! job-store (->Job 542 \\"bills-questions\\" true (Date. 456) \:queued nil))\\r\\n(put-job\! job-store (->Job 731 \\"rewards-question\\" false (Date. 789) \:queued nil))" "(swap\! (\:data job-store) (fn [jobs] (map \#(assoc % \:status \:working) (\:jobs jobs))))" "(get-jobs job-store)" "(def job-store (->AtomStore (atom {\:jobs '()})))" "(put-job\! job-store (->Job 456  \\"bills-questions\\" false (Date. 123) \:queued nil))\\r\\n(put-job\! job-store (->Job 542 \\"bills-questions\\" true (Date. 456) \:queued nil))\\r\\n(put-job\! job-store (->Job 731 \\"rewards-question\\" false (Date. 789) \:queued nil))" "(swap\! (\:data store) update-in [\:jobs] (fn [jobs] (map \#(assoc % \:status \:working) (\:jobs jobs))))" "(swap\! (\:data job-store) update-in [\:jobs] (fn [jobs] (map \#(assoc % \:status \:working) (\:jobs jobs))))" "(get-jobs job-store)" "(def job-store (->AtomStore (atom {\:jobs '()})))" "(put-job\! job-store (->Job 456  \\"bills-questions\\" false (Date. 123) \:queued nil))\\r\\n(put-job\! job-store (->Job 542 \\"bills-questions\\" true (Date. 456) \:queued nil))\\r\\n(put-job\! job-store (->Job 731 \\"rewards-question\\" false (Date. 789) \:queued nil))" "(swap\! (\:data job-store) update-in [\:jobs] (fn [jobs] (map \#(assoc % \:status \:working) jobs)))" "(get-jobs job-store)" "(assign-job\! job-store (first (get-agents agent-store)))" "(get-jobs job-store)" "(get-sorted-jobs-tobe-assigned (get-jobs job-store))" "(put-agent\! agent-store (->Agent 409 \\"Batman\\" [\\"rewards-question\\"] [\\"bills-questions\\"]))" "(get-agents agent-store)" "(get-jobs job-store)" "(put-job\! job-store (->Job 456  \\"bills-questions\\" false (Date. 123) \:queued nil))" "(get-jobs job-store)" "(map \#(assoc \#(assoc % \:working-agent-id (\:id agent)) \:status \:working) (get-sorted-jobs-tobe-assigned (get-jobs job-store)))" "(assign-job\! job-store (first (get-agents agent-store)))" "(get-sorted-jobs-tobe-assigned (get-jobs job-store) (first (get-agents agent-store)))" "(get-queued-jobs (get-jobs job-store))" "(get-jobs-by-primaryskillset-agent *1)" "(get-jobs-by-primaryskillset-agent *1 (first (get-agents agent-store)))" "(get-sorted-jobs *1)" "(get-sorted-jobs (get-jobs job-store))" "(get-urgent-jobs *3)" "(get-jobs-by-primaryskillset-agent (get-jobs job-store) (first (get-agents agent-store)))" "(flatten *1)" "(get-sorted-jobs-tobe-assigned (get-jobs job-store) (first (get-agents agent-store)))" "(first (get-agents agent-store))" "(put-agent\! agent-store (->Agent 786 \\"Belom\\" [\\"dota-questions\\"] []))" "(first (get-agents agent-store))" "(get-sorted-jobs-tobe-assigned (get-jobs job-store) (first (get-agents agent-store)))" "(->coreptls/AtomStore (ref {\:jobs '()}))" "(->AtomStore (ref {\:jobs '()}))" "(get-jobs job-store)" "(coreptls/get-jobs job-store)" "(coreptls/get-jobs coreptls/job-store)" "(get-job-tobe-assigned coreptls/job-store (first (coreptls/get-agents coreptls/agent-store)))" "(coreptls/assign-job\! coreptls/job-store get-job-tobe-assigned (first (coreptls/get-agents coreptls/agent-store)))" "(fn [jobs] (map \#(assoc (assoc % \:status \:working) \:working-agent-id (\:id agent)) (get-job-tobe-assigned (first (coreptls/get-jobs coreptls/job-store)) (first (coreptls/get-agents coreptls/agent-store)))))" "(map \#(assoc (assoc % \:status \:working) \:working-agent-id (\:id agent)) (get-job-tobe-assigned (first (coreptls/get-jobs coreptls/job-store)) (first (coreptls/get-agents coreptls/agent-store))))" "(get-job-tobe-assigned (coreptls/get-jobs coreptls/job-store) (first (coreptls/get-agents coreptls/agent-store)))" "(job-request-by-agentid 123)" "(get-agent-by-id (coreptls/get-agents coreptls/agent-store) id)" "(get-agent-by-id (coreptls/get-agents coreptls/agent-store) 123)" "(job-request-by-agentid 123)" "coreptls/job-store" "(job-request-by-agentid 123)" "coreptls/job-store" "(job-request-by-agentid 123)" "(map \#(if (\= (% \:id) job-id)(assoc (assoc % \:status \:working) \:working-agent-id (\:id (first (coreptls/get-agents coreptls/agent-store)))) %) (coreptls/get-jobs coreptls/job-store))" "(map \#(if (\= (% \:id) 123)(assoc (assoc % \:status \:working) \:working-agent-id (\:id (first (coreptls/get-agents coreptls/agent-store)))) %) (coreptls/get-jobs coreptls/job-store))" "(job-request-by-agentid 123)" "(coreptls/get-jobs coreptls/job-store)" "(job-request-by-agentid 123)" "(get-job-tobe-assigned (coreptls/get-jobs coreptls/job-store) (get-agent-by-id (coreptls/get-agents coreptls/agent-store) id))" "(get-job-tobe-assigned (coreptls/get-jobs coreptls/job-store) (get-agent-by-id (coreptls/get-agents coreptls/agent-store) 123))" "(job-request-by-agentid 123)" "(get-job-tobe-assigned (coreptls/get-jobs coreptls/job-store) (get-agent-by-id (coreptls/get-agents coreptls/agent-store) 123))" "(f/fail \\"Message here\\")" "(get-job-tobe-assigned (coreptls/get-jobs coreptls/job-store) (get-agent-by-id (coreptls/get-agents coreptls/agent-store) 123))" "(job-request-by-agentid 123)" "(f/fail derror/no-queued-jobs-for-skillset)" "(get-job-tobe-assigned (coreptls/get-jobs coreptls/job-store) (get-agent-by-id (coreptls/get-agents coreptls/agent-store) 123))" "(get-sorted-jobs-tobe-assigned (coreptls/get-jobs coreptls/job-store) (get-agent-by-id (coreptls/get-agents coreptls/agent-store) 123))" "(job-request-by-agentid 123)" "(get-job-tobe-assigned (coreptls/get-jobs coreptls/job-store) (get-agent-by-id (coreptls/get-agents coreptls/agent-store) 123))" "(job-request-by-agentid 123)" "(get-job-tobe-assigned (coreptls/get-jobs coreptls/job-store) (get-agent-by-id (coreptls/get-agents coreptls/agent-store) 123))" "(get-sorted-jobs-tobe-assigned (coreptls/get-jobs coreptls/job-store) (get-agent-by-id (coreptls/get-agents coreptls/agent-store) 123))" "(job-request-by-agentid 123)" "(coreptls/get-jobs coreptls/job-store)" "(job-request-by-agentid 123)" "(coreptls/get-jobs coreptls/job-store)" "(job-request-by-agentid 123)" "(existed-agent? (first (coreptls/get-agents coreptls/agent-store)))" "(new-agent (first (coreptls/get-agents coreptls/agent-store)))" "(existed-agent? (->coreptls/Agent 367 \\"S\u00E3nic\\" [\\"running-questions\\"] []))" "(existed-agent? (coreptls/->Agent 367 \\"S\u00E3nic\\" [\\"running-questions\\"] []))" "(coreptls/get-agents coreptls/agent-store)" "(new-agent (coreptls/->Agent 367 \\"S\u00E3nic\\" [\\"running-questions\\"] []))" "(coreptls/get-agents coreptls/agent-store)" "(existed-job? (first (coreptls/get-jobs coreptls/job-store)))" "(existed-job? (coreptls/->Job 089 \\"dota-question\\" false (Date. 789) \:queued nil))" "(existed-job? (coreptls/->Job 089 \\"dota-question\\" false (java.util.Date. 789) \:queued nil))" "(existed-job? (coreptls/->Job 089 \\"dota-question\\" false (Date. 789) \:queued nil))" "(existed-job? (coreptls/->Job 89 \\"dota-question\\" false (Date. 789) \:queued nil))" "(existed-job? (coreptls/->Job 54 \\"dota-question\\" false (Date. 1008) \:queued nil))" "(new-job (coreptls/->Job 54 \\"dota-question\\" false (Date. 1008) \:queued nil))" "(coreptls/get-jobs coreptls/job-store)" "(new-job (coreptls/->Job 54 \\"dota-question\\" false (Date. 1008) \:queued nil))" "(job-request-by-agentid 77777)" "(new-job (coreptls/->Job 409 \\"dota-question\\" false (Date. 1008) \:queued nil))" "(coreptls/get-jobs coreptls/job-store)" "(new-agent (coreptls/->Agent 80 \\"Mario\\" [\\"running-questions\\"] []))" "(coreptls/get-agents coreptls/agent-store)" "(boolean? true)" "(false)" "(empty? [])" "(not true)" "(next-id)" "(defn new-job\\r\\n  \\"Creates a new job and add to the JobRecords.\\"\\r\\n  [{\:keys [id type urgent entry-date status working-agent-id]}]\\r\\n   {\:pre [(string? name)]}\\r\\n   (add-job (->Job id type urgent entry-date status working-agent-id)))" "(new-agent 123 \\"Ronaldo\\" [\\"bills-questions\\"] [])" "(empty? \\"\\")" "(empty? \\"ronaldo\\")" "(defn validate-agent-input\\r\\n  \\"TO BE DOC\\"\\r\\n  [id name primary-skillset secondary-skillset]\\r\\n  (if (or (not (string? name)) (empty? name)) (f/fail derror/agent-name-not-valid))\\r\\n  (if (empty? primary-skillset) (f/fail derror/agent-primaryskilset-not-provided)))" "(validate-agent-input 123 \\"Ronaldo\\" [\\"bills-questions\\"] [])" "(new-agent 123 \\"Ronaldo\\" [\\"bills-questions\\"] [])" "(validate-agent-input 123 \\"Ronaldo\\" [\\"bills-questions\\"] [])" "(get-agents agent-store)" "(validate-agent-input 123 \\"Ronaldo\\" [\\"bills-questions\\"] [])" "(true? (existed-agent? 123))" "(existed-job? 123)" "(get-jobs job-store)" "(existed-agent? 123)" "(get-agents agent-store)" "(some \#(println (\:id %) (\:id agent-id)) (get-agents agent-store))" "(new-agent 123 \\"Ronaldo\\" [\\"bills-questions\\"] [])" "(validate-agent-input 123 \\"Ronaldo\\" [\\"bills-questions\\"] [])" "(if (true? (existed-agent? 123)) (f/fail derror/agent-already-exists))" "(validate-agent-input 123 \\"Ronaldo\\" [\\"bills-questions\\"] [])" "((if (true? (existed-agent? 123)) (f/fail derror/agent-already-exists))\\r\\n(if (or (not (string? name)) (empty? \\"Ronaldo\\")) (f/fail derror/agent-name-not-valid)))" "((if (true? (existed-agent? 123)) (f/fail derror/agent-already-exists))\\r\\n   (if (or (not (string? name)) (empty? \\"Ronaldo\\")) (f/fail derror/agent-name-not-valid)))" "(new-agent 123 \\"Ronaldo\\" [\\"bills-questions\\"] [])" "(validate-agent-input 123 \\"Ronaldo\\" [\\"bills-questions\\"] [])" "(validate-agent-input 123 nil [\\"bills-questions\\"] [])" "(validate-agent-input 7811 nil [\\"bills-questions\\"] [])" "(validate-agent-input 7811 \\"Belom\\" [] [])" "(new-agent 123 \\"Ronaldo\\" [\\"bills-questions\\"] [])" "(new-agent 123 nil [\\"bills-questions\\"] [])" "(new-agent 78798 nil [\\"bills-questions\\"] [])" "(new-agent 78798 \\"Ronaldo\\" [] [])" "(new-job 456  \\"bills-questions\\" false)" "(new-job 555  123 false)" "(new-job 888  \\"bills-questions\\" 2123)" "(get-jobs job-store)" "(\= \\"12\\" \\"2\\")" "(\= \\"12\\" \\"12\\")" "(sunny-case-test)" "(cr/job-request-by-agentid  \\"260\\")" "(job-request-by-agentid \\"260\\")" "(job-request-by-agentid \\"c88\\")" "(a-test)" "(job-request-by-agentid \\"260\\")" "(coreptls/new-agent \\"260\\" \\"BoJack Horseman\\" [\\"bills-questions\\"] [])\\r\\n  (coreptls/new-agent \\"c88\\"  \\"Mr. Peanut Butter\\" [\\"rewards-question\\"] [\\"bills-questions\\" \\"lost-theft-questions\\" \\"card-questions\\"])\\r\\n  \\r\\n  (coreptls/new-job \\"c36\\" \\"rewards-question\\" false)\\r\\n  (coreptls/new-job \\"864\\" \\"bills-questions\\" false)\\r\\n  (coreptls/new-job \\"990\\" \\"card-questions\\" true)\\r\\n  (coreptls/new-job \\"1d2\\" \\"lost-theft-questions\\" true)" "(get-agents agent-store)\\r\\n(get-jobs job-store)" "(coreptls/get-agents coreptls/agent-store)\\r\\n(coreptls/get-jobs coreptls/job-store)" "(job-request-by-agentid  \\"260\\")" "(job-request-by-agentid  \\"c88\\")" "(get-jobs job-store)" "(clean-jobs\! job-store)" "(get-jobs job-store)" "(clean-jobs\! job-store)" " (new-job \\"864\\" \\"bills-questions\\" false)" "(get-jobs job-store)" "job-store" "(get-agents agent-store)" "(clean-agents\! agent-store)" "(get-agents agent-store)" "(job-exists? 465)" "(get-jobs job-store)" "(job-exists? 333)" "(job-exists? 456)" "(not (true? ((job-exists? 333))))" "(not (true? (job-exists? 333)))" "derror/agent-primaryskilset-not-provided" "(derror/get-message-id (coreptls/validate-agent-input \\"123\\" \\"Ronaldo\\" [] []))" "(coreptls/validate-agent-input \\"123\\" \\"Ronaldo\\" [] [])" "(derror/message (coreptls/validate-agent-input \\"123\\" \\"Ronaldo\\" [] []))" "(f->HasFailed/message (coreptls/validate-agent-input \\"123\\" \\"Ronaldo\\" [] []))" "(f/message (coreptls/validate-agent-input \\"123\\" \\"Ronaldo\\" [] []))" "  (coreptls/clean-jobs\! coreptls/job-store)\\r\\n  (coreptls/clean-agents\! coreptls/agent-store)\\r\\n  \\r\\n  (coreptls/new-job \\"c36\\" \\"rewards-question\\" false)\\r\\n  (coreptls/new-job \\"864\\" \\"bills-questions\\" false)\\r\\n  (coreptls/new-job \\"1d2\\" \\"bills-questions\\" true)\\r\\n  \\r\\n  (coreptls/new-agent \\"260\\" \\"BoJack Horseman\\" [\\"bills-questions\\"] [])\\r\\n  (cr/job-request-by-agentid  \\"260\\")" "(some \#(not (\:status %) \:queued) (cr/get-queued-jobs (coreptls/get-jobs coreptls/job-store)))" "(some \#(not (true? (\:status %) \:queued)) (cr/get-queued-jobs (coreptls/get-jobs coreptls/job-store)))" "(some \#(not (\= (\:status %) \:queued)) (cr/get-queued-jobs (coreptls/get-jobs coreptls/job-store)))" "(coreptls/get-jobs coreptls/job-store)" "(cr/get-queued-jobs (coreptls/get-jobs coreptls/job-store))" " (some \#(not (\= (\:status %) \:queued)) (coreptls/get-jobs coreptls/job-store))" "(coreptls/clean-jobs\! coreptls/job-store)\\r\\n  \\r\\n  (coreptls/new-job \\"c36\\" \\"rewards-question\\" false)\\r\\n  (Thread/sleep 100)\\r\\n  (coreptls/new-job \\"864\\" \\"bills-questions\\" false)\\r\\n  (Thread/sleep 100)\\r\\n  (coreptls/new-job \\"1d2\\" \\"bills-questions\\" true)" "(check-sorted-jobs ((coreptls/get-jobs coreptls/job-store) [\\"c36\\" \\"864\\" \\"1d2\\"]))" "(\:id (first (coreptls/get-jobs coreptls/job-store)))" "(coreptls/get-jobs coreptls/job-store)" "(\= (\:id (first (coreptls/get-jobs coreptls/job-store))) (first [1 2 3]))" "(empty? (coreptls/get-jobs coreptls/job-store))" "(rest (coreptls/get-jobs coreptls/job-store))" "(check-sorted-jobs ((coreptls/get-jobs coreptls/job-store) [\\"c36\\" \\"864\\" \\"1d2\\"]))" "  (coreptls/clean-jobs\! coreptls/job-store)\\r\\n  \\r\\n  (coreptls/new-job \\"c36\\" \\"rewards-question\\" false)\\r\\n  (Thread/sleep 100)\\r\\n  (coreptls/new-job \\"864\\" \\"bills-questions\\" false)\\r\\n  (Thread/sleep 100)\\r\\n  (coreptls/new-job \\"1d2\\" \\"bills-questions\\" true)" "(defn check-sorted-jobs \\r\\n  ([sorted-jobs job-ids] (check-sorted-jobs sorted-jobs job-ids false))\\r\\n  ([sorted-jobs job-ids result-flag]\\r\\n    (if (or (false? result-flag) (empty? sorted-jobs))\\r\\n      result-flag \\r\\n      (check-sorted-jobs (rest sorted-jobs) (rest job-ids) (\= (\:id (first sorted-jobs)) (first job-ids))))))" "(check-sorted-jobs ((sort-jobs-by-date (coreptls/get-jobs coreptls/job-store)) [\\"c36\\" \\"864\\" \\"1d2\\"]))" "(sort-jobs-by-date (coreptls/get-jobs coreptls/job-store))" "(check-sorted-jobs [1 2 3] [1 2 3])" "(check-sorted-jobs [4 5 6] [1 2 3])" "(check-sorted-jobs (sort-jobs-by-date (coreptls/get-jobs coreptls/job-store)) [\\"c36\\" \\"864\\" \\"1d2\\"])" "(first [\\"c36\\" \\"864\\" \\"1d2\\"])" "(cr/get-jobs-by-primaryskillset-agent (coreptls/get-jobs coreptls/job-store) (cr/get-agent-by-id (coreptls/get-agents coreptls/agent-store) \\"260\\"))" "(coreptls/clean-jobs\! coreptls/job-store)\\r\\n  (coreptls/clean-agents\! coreptls/agent-store)\\r\\n  \\r\\n  (coreptls/new-agent \\"260\\" \\"BoJack Horseman\\" [\\"bills-questions\\"] [])\\r\\n  (coreptls/new-agent \\"c88\\"  \\"Mr. Peanut Butter\\" [\\"rewards-question\\"] [\\"bills-questions\\"])\\r\\n  \\r\\n  (coreptls/new-job \\"c36\\" \\"rewards-question\\" false)\\r\\n  (coreptls/new-job \\"864\\" \\"bills-questions\\" false)\\r\\n  (coreptls/new-job \\"1d2\\" \\"bills-questions\\" true)" "(cr/get-jobs-by-primaryskillset-agent (coreptls/get-jobs coreptls/job-store) (cr/get-agent-by-id (coreptls/get-agents coreptls/agent-store) \\"260\\"))" "(\:id (cr/get-jobs-by-primaryskillset-agent (coreptls/get-jobs coreptls/job-store) (cr/get-agent-by-id (coreptls/get-agents coreptls/agent-store) \\"260\\")))" "(contains? [\\"rewards-question\\" \\"crossover-questions\\"] \\"crossover-questions\\")" "(contains? {\\"rewards-question\\" \\"crossover-questions\\" } \\"crossover-questions\\")" "(read-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Documents\\\\\\\\test-cases\\\\\\\\inputs\\\\\\\\basic\\\\\\\\input.json\\")" "(first *1)" "(keys (read-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Documents\\\\\\\\test-cases\\\\\\\\inputs\\\\\\\\basic\\\\\\\\input.json\\"))" "(read-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Documents\\\\\\\\test-cases\\\\\\\\inputs\\\\\\\\basic\\\\\\\\input.json\\")" "(keys (first (read-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Documents\\\\\\\\test-cases\\\\\\\\inputs\\\\\\\\basic\\\\\\\\input.json\\")))" "(\:new_agent (first (read-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Documents\\\\\\\\test-cases\\\\\\\\inputs\\\\\\\\basic\\\\\\\\input.json\\")))" "(process-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Documents\\\\\\\\test-cases\\\\\\\\inputs\\\\\\\\basic\\\\\\\\input.json\\")" "(read-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Documents\\\\\\\\test-cases\\\\\\\\inputs\\\\\\\\basic\\\\\\\\input.json\\")" "(map \#(println %) *1)" "(read-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Documents\\\\\\\\test-cases\\\\\\\\inputs\\\\\\\\basic\\\\\\\\input.json\\")" "(service/call-service (first *1))" "(read-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Documents\\\\\\\\test-cases\\\\\\\\inputs\\\\\\\\basic\\\\\\\\input.json\\")" "(keys (first (read-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Documents\\\\\\\\test-cases\\\\\\\\inputs\\\\\\\\basic\\\\\\\\input.json\\")))" "(process-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Documents\\\\\\\\test-cases\\\\\\\\inputs\\\\\\\\basic\\\\\\\\input.json\\")" "(type (keys (first (process-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Documents\\\\\\\\test-cases\\\\\\\\inputs\\\\\\\\basic\\\\\\\\input.json\\"))))" "(first (*1))" "(type (keys (first (read-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Documents\\\\\\\\test-cases\\\\\\\\inputs\\\\\\\\basic\\\\\\\\input.json\\"))))" "(keys (first (read-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Documents\\\\\\\\test-cases\\\\\\\\inputs\\\\\\\\basic\\\\\\\\input.json\\")))" "(first (keys (first (read-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Documents\\\\\\\\test-cases\\\\\\\\inputs\\\\\\\\basic\\\\\\\\input.json\\"))))" "(process-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Documents\\\\\\\\test-cases\\\\\\\\inputs\\\\\\\\basic\\\\\\\\input.json\\")" "(process-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")" "(coreptls/get-agents coreptls/agent-store)" "(coreptls/get-jobs coreptls/job-store)" "(process-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")" "(cr/job-request-by-agentid \\"8ab86c18-3fae-4804-bfd9-c3d6e8f66260\\")" "(process-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")" "(get-directory-path \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")" "(get-file-name \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")" "(get-file-name \\"/home/danilo/feio/ronaldo.txt\\")" "(get-directory-path \\"/home/danilo/feio/ronaldo.txt\\")" "(.isDirectory (io/file (get-directory-path \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")))" "(.exists (io/file (get-file-name \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")))" "(.exists (io/file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\"))" "(.exists (io/file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\ronaldo.txt\\"))" "(check-file-path \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")" "(check-file-path \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\ronaldo.txt\\")" "(get-directory-path \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")" "(get-directory-path \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloadao\\\\\\\\rr.txt\\")" "(get-file-name \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")" "(get-file-name \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\ronaldo.txt\\")" "(get-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\rona\\")" "(file-seq (get-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\rona\\"))" "(first (file-seq (get-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\rona\\")))" "(last (file-seq (get-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\rona\\")))" "(. (last (file-seq (get-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\rona\\"))) getName)" "(re-find \#\\"*.json\\" (file-seq (get-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\rona\\")))" "(re-find \#\\".json\\" \\"ronslaod.json\\")" "(re-find \#\\".json\\" \\"ronaldo.txt\\")" "(get-jsonfiles-from \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\")" "(first (get-jsonfiles-from \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\"))" "(.getAbsoluteFile *1)" "(.getCanonicalPath *2)" "(process-json-files \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\")" "(process-json-files \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")" "(get-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")" "(.getPath *1)" "(.Date)" "(process-json-files \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")" "\\"ronaldo\\" \\"belom\\"" "(process-json-files \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")" "(process-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")" "(.getPath (get-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\"))" "(str (.getPath (get-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")) \\"/response-\\" (.getTime (Date.)) \\".json\\")" "(str (.getPath (get-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")) (get-directory-delimiter filepath) \\"response-\\" (.getTime (Date.)) \\".json\\")" "(str (.getPath (get-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")) (get-directory-delimiter \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\") \\"response-\\" (.getTime (Date.)) \\".json\\")" "(process-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")" "(process-files-from-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")" "(get-jsonfiles-from-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")" "(.getAbsolutePath (first *1))" "(process-files-from-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")" "(process-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")" "(process file-adp/check-file-path file-adp/process-file \\"C\:\\\\Users\\\\edazfre\\\\Downloads\\\\ronaldo.json\\")" "(process file-adp/check-file-path file-adp/process-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")" "(process file-adp/check-directory-path file-adp/process-files-from-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\")" "(process-files-from-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\")" "(process file-adp/check-directory-path file-adp/process-files-from-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\")" "(create-output-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\")" "(get-jsonfiles-from-directory  \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\")" "(get-jsonfiles-from-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\")" "(process-files-from-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\")" "(process-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")" "(process-files-from-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\")" "(type [\\"tonaldo\\"])" "(type \\"oadndo\\")" "(default-schema-validate {\:id 123})" "(default-schema-validate [\\r\\n  {\\r\\n    \\"new_agent\\"\: {\\r\\n      \\"id\\"\: \\"8ab86c18-3fae-4804-bfd9-c3d6e8f66260\\",\\r\\n      \\"name\\"\: \\"BoJack Horseman\\",\\r\\n      \\"primary_skillset\\"\: [\\"bills-questions\\"],\\r\\n      \\"secondary_skillset\\"\: []\\r\\n    }\\r\\n  },\\r\\n  {\\r\\n    \\"new_job\\"\: {\\r\\n      \\"id\\"\: \\"f26e890b-df8e-422e-a39c-7762aa0bac36\\",\\r\\n      \\"type\\"\: \\"rewards-question\\",\\r\\n      \\"urgent\\"\: false\\r\\n    }\\r\\n  },\\r\\n  {\\r\\n    \\"new_agent\\"\: {\\r\\n      \\"id\\"\: \\"ed0e23ef-6c2b-430c-9b90-cd4f1ff74c88\\",\\r\\n      \\"name\\"\: \\"Mr. Peanut Butter\\",\\r\\n      \\"primary_skillset\\"\: [\\"rewards-question\\"],\\r\\n      \\"secondary_skillset\\"\: [\\"bills-questions\\"]\\r\\n    }\\r\\n  },\\r\\n  {\\r\\n    \\"new_job\\"\: {\\r\\n      \\"id\\"\: \\"690de6bc-163c-4345-bf6f-25dd0c58e864\\",\\r\\n      \\"type\\"\: \\"bills-questions\\",\\r\\n      \\"urgent\\"\: false\\r\\n    }\\r\\n  },\\r\\n  {\\r\\n    \\"new_job\\"\: {\\r\\n      \\"id\\"\: \\"c0033410-981c-428a-954a-35dec05ef1d2\\",\\r\\n      \\"type\\"\: \\"bills-questions\\",\\r\\n      \\"urgent\\"\: true\\r\\n    }\\r\\n  },\\r\\n  {\\r\\n    \\"job_request\\"\: {\\r\\n      \\"agent_id\\"\: \\"8ab86c18-3fae-4804-bfd9-c3d6e8f66260\\"\\r\\n    }\\r\\n  },\\r\\n  {\\r\\n    \\"job_request\\"\: {\\r\\n      \\"agent_id\\"\: \\"ed0e23ef-6c2b-430c-9b90-cd4f1ff74c88\\"\\r\\n    }\\r\\n  }\\r\\n]\\r\\n)" "(get-json \\"[\\r\\n  {\\r\\n    \\"new_agent\\"\: {\\r\\n      \\"id\\"\: \\"8ab86c18-3fae-4804-bfd9-c3d6e8f66260\\",\\r\\n      \\"name\\"\: \\"BoJack Horseman\\",\\r\\n      \\"primary_skillset\\"\: [\\"bills-questions\\"],\\r\\n      \\"secondary_skillset\\"\: []\\r\\n    }\\r\\n  },\\r\\n  {\\r\\n    \\"new_job\\"\: {\\r\\n      \\"id\\"\: \\"f26e890b-df8e-422e-a39c-7762aa0bac36\\",\\r\\n      \\"type\\"\: \\"rewards-question\\",\\r\\n      \\"urgent\\"\: false\\r\\n    }\\r\\n  },\\r\\n  {\\r\\n    \\"new_agent\\"\: {\\r\\n      \\"id\\"\: \\"ed0e23ef-6c2b-430c-9b90-cd4f1ff74c88\\",\\r\\n      \\"name\\"\: \\"Mr. Peanut Butter\\",\\r\\n      \\"primary_skillset\\"\: [\\"rewards-question\\"],\\r\\n      \\"secondary_skillset\\"\: [\\"bills-questions\\"]\\r\\n    }\\r\\n  },\\r\\n  {\\r\\n    \\"new_job\\"\: {\\r\\n      \\"id\\"\: \\"690de6bc-163c-4345-bf6f-25dd0c58e864\\",\\r\\n      \\"type\\"\: \\"bills-questions\\",\\r\\n      \\"urgent\\"\: false\\r\\n    }\\r\\n  },\\r\\n  {\\r\\n    \\"new_job\\"\: {\\r\\n      \\"id\\"\: \\"c0033410-981c-428a-954a-35dec05ef1d2\\",\\r\\n      \\"type\\"\: \\"bills-questions\\",\\r\\n      \\"urgent\\"\: true\\r\\n    }\\r\\n  },\\r\\n  {\\r\\n    \\"job_request\\"\: {\\r\\n      \\"agent_id\\"\: \\"8ab86c18-3fae-4804-bfd9-c3d6e8f66260\\"\\r\\n    }\\r\\n  },\\r\\n  {\\r\\n    \\"job_request\\"\: {\\r\\n      \\"agent_id\\"\: \\"ed0e23ef-6c2b-430c-9b90-cd4f1ff74c88\\"\\r\\n    }\\r\\n  }\\r\\n]\\r\\n\\")" "(start-console)" "(new-agent-validate {\:new_agent{id\:\\"8ab86c18-3fae-4804-bfd9-c3d6e8f66260\\",\:name\\"BoJack Horseman\\",\:secondary_skillset[]}})" "(new-agent-validate {id\:\\"8ab86c18-3fae-4804-bfd9-c3d6e8f66260\\",\:name\\"BoJack Horseman\\",\:secondary_skillset[]})" "(new-agent-validate {\:id \\"8ab86c18-3fae-4804-bfd9-c3d6e8f66260\\",\:name \\"BoJack Horseman\\",\:secondary_skillset []})" "(call-new-agent {\:id \\"8ab86c18-3fae-4804-bfd9-c3d6e8f66260\\",\:name \\"BoJack Horseman\\",\:secondary_skillset []})" "(data-file)" "data-file" "(file-adp/check-file-path (.getAbsolutePath basic-input))" "basic-input" "(.getPath  basic-input)" "(.getFile  basic-input)" "(io/file (.getFile  basic-input))" "(.getAbsolutePath basic-input)" "(file-adp/get-file-name invalid-input)" "(f/message derror/file-path-invalid)" "(file-adp/check-file-path invalid-input)" "derror/file-path-invalid" "(f/message derror/file-path-invalid)" "(\= (f/message derror/file-path-invalid) (file-adp/check-file-path invalid-input))" "(file-adp/get-file-name invalid-input)" "(f/message (file-adp/get-file-name invalid-input))" "(file-adp/check-directory-path basic-input-path)" "basic-input-path" "(file-adp/get-directory basic-input-path)" "basic-input-directory" "(file-adp/check-directory-path basic-input-path)" "(file-adp/check-directory-path directory)" "(create-output-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\")" "(create-output-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\" \\"output-1524095524066LBADB\\")" "(file-adp/create-output-file (file-adp/read-file basic-out-file) basic-out-path)" "(diff (io/file (file-adp/create-output-file (file-adp/read-file basic-out-file) basic-out-path)) basic-out-file)" "(data/diff (io/file (file-adp/create-output-file (file-adp/read-file basic-out-file) basic-out-path)) basic-out-file)" "(data/diff (io/file (file-adp/create-output-file (file-adp/read-file basic-out-file) basic-out-path)) basic-input-file)" "(file-adp/read-file (file-adp/create-output-file (file-adp/read-file basic-out-file) basic-out-path)) (file-adp/read-file basic-input-file)" "(data/diff (file-adp/read-file (file-adp/create-output-file (file-adp/read-file basic-out-file) basic-out-path)) (file-adp/read-file basic-out-file))" "(data/diff (file-adp/read-file (file-adp/create-output-file (file-adp/read-file basic-out-file) basic-out-path)) (file-adp/read-file basic-input-file))" "(io/file (file-adp/create-output-directory basic-input-directory \\"new-output\\"))" "(.isDirectory (io/file (file-adp/create-output-directory basic-input-directory \\"new-output\\")))" "(file-adp/create-output-directory basic-input-directory \\"new-output\\")" "basic-input-directory" "(last (basic-input-directory))" "(take-last basic-input-directory)" "(take-last 1 basic-input-directory)" "(last basic-input-directory)" "basic-input-directory-file" "(file-adp/check-directory-path \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\")" "(file-adp/check-directory-path \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\")" "(file-adp/create-output-directory basic-input-directory \\"output\\")" "(file-adp/create-output-directory basic-input-directory \\"new-output\\")" "(create-output-directory basic-input-directory \\"new-output\\")" "(create-output-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\" \\"new-output\\")" "(\= (last \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\") (get-directory-delimiter \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\"))" "(last \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\")" "(get-directory-delimiter \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\")" "(str (last \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\"))" "(str (get-directory-delimiter \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\"))" "(\= (str (last \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\"))  (str (get-directory-delimiter \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\")))" "(str \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\" \\"output2\\")" "(check-directory-path (str \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\" \\"output2\\"))" "(create-output-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\output2\\")" "(create-output-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\" \\"\\\\\\\\output2\\")" "\=> (create-output-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\" \\"output3\\")" "(create-output-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\" \\"\\\\\\\\output2\\")" "(create-output-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\" \\"output5\\")" "(file-adp/create-output-directory basic-input-directory)" "(create-output-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\")" "(create-output-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\")" "(file-adp/create-output-directory basic-input-directory \\"new-output\\")" "(file-adp/create-output-directory basic-input-directory)" "(file-adp/get-directory-delimiter basic-input-path)" "(file-adp/get-directory-delimiter basic-input-jvmpath)" "(file-adp/create-output-directory basic-input-directory)" "(file-adp/get-directory-delimiter basic-input-directory)" "(file-adp/create-output-directory basic-input-directory)" "(str (str directory) (get-directory-delimiter (str directory)) \\"output-\\" (.getTime (Date.)) (rand-str))" "(file-adp/create-output-directory basic-input-directory)" "basic-input-directory" "(file-adp/create-output-directory basic-input-directory)" "(equal-files? (file-adp/process-file basic-input-path) basic-out-file)" "(file-adp/process-file basic-input-path)" "(data/diff (file-adp/process-file basic-input-path) basic-out-file)" "(file-adp/create-output-file basic-out-file basic-out-path)" "(file-adp/create-output-file (file-adp/read-file basic-out-file) basic-out-path)" "(file-adp/create-output-file (file-adp/read-file basic-out-file) basic-out-directory)" "(file-adp/create-output-file (file-adp/read-file basic-out-file) \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\views\\\\\\\\job-queue\\\\\\\\job-queue-manager\\\\\\\\resources\\\\\\\\example_inputs\\\\\\\\basic\\\\\\\\output\\\\\\\\\\")" "(file-adp/create-output-file (file-adp/read-file basic-out-file) basic-out-directory)" "(equal-files? (file-adp/create-output-file (file-adp/read-file basic-out-file) basic-out-directory) basic-out-file)" "(data/diff (file-adp/create-output-file (file-adp/read-file basic-out-file) basic-out-directory) basic-out-file)" "(data/diff (file-adp/create-output-file (file-adp/read-file basic-out-file) basic-out-directory) (file-adp/read-file basic-out-file))" "(first (data/diff (file-adp/create-output-file (file-adp/read-file basic-out-file) basic-out-directory) (file-adp/read-file basic-out-file)))" "(data/diff (file-adp/create-output-file (file-adp/read-file basic-out-file) basic-out-directory) (file-adp/read-file basic-out-file))" "(file-adp/read-file basic-out-file)" "(file-adp/create-output-file (file-adp/read-file basic-out-file) basic-out-directory)" "(data/diff (file-adp/read-file (file-adp/create-output-file (file-adp/read-file basic-out-file) basic-out-directory)) (file-adp/read-file basic-out-file))" "(equal-files? (file-adp/read-file (file-adp/create-output-file (file-adp/read-file basic-out-file) basic-out-directory)) (file-adp/read-file basic-out-file))" "(file-adp/read-file (file-adp/create-output-file (file-adp/read-file basic-out-file) basic-out-directory))" "(file-adp/read-file basic-out-file)" "(equal-files? (file-adp/create-output-file (file-adp/read-file basic-out-file) basic-out-directory) basic-out-file)" "(not-equal-files?  (file-adp/create-output-file (file-adp/read-file basic-out-file) basic-out-directory) basic-input-file )" "basic-input-path" "(file-adp/process-file basic-input-path)" "(process-console)" "(process-files-from-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\")" "(process-files-from-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\")" "(get-jsonfiles-from-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\")" "(process-files-from-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\")" "(process-files-from-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\")" "(get-jsonfiles-from-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\")" "(get-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\")" "(get-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\")" "(check-directory-path \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\")" "(get-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\")" "(get-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\123\\")" "(get-jsonfiles-from-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\")" "(get-jsonfiles-from-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\")" "(get-jsonfiles-from-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\")" "(get-jsonfiles-from-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\")" "(process-files-from-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\")" "(append-directory-delimiter \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\")" "(append-directory-delimiter \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\")" "(process-files-from-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\")" "(process-files-from-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\\\")" "(process-files-from-directory \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\")" "(remove \#(nil? %) (map \#(service/call-service %) (file-adp/read-file \\"C\:\\\\\\\\Users\\\\\\\\edazfre\\\\\\\\Downloads\\\\\\\\sample-input.json\\")))" "(Long/valueOf \\"123\\")" "-main" "(start-server 3000)" "(new-agent 123 \\"Ronaldo\\" [\\"bills-questions\\"] [])\\r\\n(new-agent 987 \\"Pluto\\" [\\"rewards-question\\"] [])\\r\\n(new-agent 409 \\"Batman\\" [\\"rewards-question\\"] [\\"bills-questions\\"])\\r\\n(new-agent 786 \\"Belom\\" [\\"dota-questions\\"] [])\\r\\n(new-agent 367 \\"S\u00E3nic\\" [\\"running-questions\\"] [])" "(coreptls/new-agent 123 \\"Ronaldo\\" [\\"bills-questions\\"] [])\\r\\n(coreptls/new-agent 987 \\"Pluto\\" [\\"rewards-question\\"] [])\\r\\n(coreptls/new-agent 409 \\"Batman\\" [\\"rewards-question\\"] [\\"bills-questions\\"])\\r\\n(coreptls/new-agent 786 \\"Belom\\" [\\"dota-questions\\"] [])\\r\\n(coreptls/new-agent 367 \\"S\u00E3nic\\" [\\"running-questions\\"] [])" "(new-job 456  \\"bills-questions\\" false)\\r\\n(new-job 542 \\"bills-questions\\" true)\\r\\n(new-job 142 \\"rewards-question\\" true)\\r\\n(new-job 731 \\"rewards-question\\" false)\\r\\n(new-job  89 \\"dota-question\\" false)" "(coreptls/new-job 456  \\"bills-questions\\" false)\\r\\n(coreptls/new-job 542 \\"bills-questions\\" true)\\r\\n(coreptls/new-job 142 \\"rewards-question\\" true)\\r\\n(coreptls/new-job 731 \\"rewards-question\\" false)\\r\\n(coreptls/new-job  89 \\"dota-question\\" false)" "(get-jobs-by-working-agent-id (coreptls/get-all-jobs) (get-agent-by-id (coreptls/get-all-agents) 456))" "(job-request-by-agentid 456)\\r\\n(job-request-by-agentid 456)" "(job-request-by-agentid \\"456\\")\\r\\n(job-request-by-agentid \\"456\\")" "(coreptls/clean-all-agents)\\r\\n(coreptls/clean-all-jobs)" "(coreptls/new-agent \\"123\\" \\"Ronaldo\\" [\\"bills-questions\\"] [])\\r\\n(coreptls/new-agent \\"987\\" \\"Pluto\\" [\\"rewards-question\\"] [])\\r\\n(coreptls/new-agent \\"409\\" \\"Batman\\" [\\"rewards-question\\"] [\\"bills-questions\\"])\\r\\n(coreptls/new-agent \\"786\\" \\"Belom\\" [\\"dota-questions\\"] [])\\r\\n(coreptls/new-agent \\"367\\" \\"S\u00E3nic\\" [\\"running-questions\\"] [])\\r\\n\\r\\n(coreptls/new-job \\"456\\"  \\"bills-questions\\" false)\\r\\n(coreptls/new-job \\"542\\" \\"bills-questions\\" true)\\r\\n(coreptls/new-job \\"142\\" \\"rewards-question\\" true)\\r\\n(coreptls/new-job \\"731\\" \\"rewards-question\\" false)\\r\\n(coreptls/new-job  \\"89\\" \\"dota-question\\" false)" "(job-request-by-agentid \\"456\\")\\r\\n(job-request-by-agentid \\"456\\")" "(coreptls/get-all-agents)\\r\\n(coreptls/get-all-jobs)" "(coreptls/get-all-agents)" "(get-jobs-by-working-agent-id (coreptls/get-all-jobs) (get-agent-by-id (coreptls/get-all-agents) \\"456\\"))" "(job-request-by-agentid \\"456\\")" "(get-agent-by-id (coreptls/get-all-agents) \\"456\\")" "(filter \#(\= (\:id %) \\"367\\") (coreptls/get-all-agents))" "(empty? (filter \#(\= (\:id %) \\"367\\") (coreptls/get-all-agents)))" "(filter \#(\= (\:id %) \\"456\\") (coreptls/get-all-agents))" "(get-agent-by-id (coreptls/get-all-agents) \\"542\\")" "(get-agent-by-id (coreptls/get-all-agents) \\"367\\")" "(get-agent-by-id (coreptls/get-all-agents) \\"142\\")" "(empty? (filter \#(\= (\:id %) \\"456\\") (coreptls/get-all-agents)))" "(filter \#(\= (\:id %) \\"456\\") (coreptls/get-all-agents))" "(\:id (first (coreptls/get-all-agents)))" "(\:id (last (coreptls/get-all-agents)))" "(filter \#(\= (\:id %) \\"123\\") (coreptls/get-all-agents))" "(filter \#(\= (\:id %) \\"456\\") (coreptls/get-all-agents))" "(filter \#(\= (\:id %) \\"731\\") (coreptls/get-all-agents))" "(filter \#((println (\:id %)) false) (coreptls/get-all-agents))" "(filter \#((println (\:id %))) (coreptls/get-all-agents))" "(filter \#((let [id (\:id %)] (println id) false)) (coreptls/get-all-agents))" "(filter \#((let [id (\:id %)] (println id))) (coreptls/get-all-agents))" "(filter \#((let [id (\:id %)] (println id) false)) (coreptls/get-all-agents))" "(filter \#((let [id (\:id %)] (println id) (\= 0 1))) (coreptls/get-all-agents))" "(filter \#((let [id (\:id %)] (println id) (\= 0 1) )) (coreptls/get-all-agents))" "(filter \#((let [id (\:id %)] (println id) (\= % 1))) (coreptls/get-all-agents))" "(filter \#((let [id (\:id %)] (println id))) (coreptls/get-all-agents))" "(for [x (coreptls/get-all-agents)] (println (\:id x)))" "(for [x (coreptls/get-all-agents)] (println x))" "(coreptls/clean-all-agents)\\r\\n(coreptls/clean-all-jobs)" "(coreptls/new-agent \\"123\\" \\"Ronaldo\\" [\\"bills-questions\\"] [])" "(coreptls/clean-all-agents)" "(coreptls/new-agent \\"123\\" \\"Ronaldo\\" [\\"bills-questions\\"] [])" "(coreptls/get-all-agents)" "(coreptls/new-agent \\"987\\" \\"Pluto\\" [\\"rewards-question\\"] [])" "(coreptls/get-all-agents)" "(coreptls/new-agent \\"409\\" \\"Batman\\" [\\"rewards-question\\"] [\\"bills-questions\\"])\\r\\n(coreptls/new-agent \\"786\\" \\"Belom\\" [\\"dota-questions\\"] [])\\r\\n(coreptls/new-agent \\"367\\" \\"S\u00E3nic\\" [\\"running-questions\\"] [])" "(coreptls/get-all-agents)" "(for [x (coreptls/get-all-agents)] (println x))" "(coreptls/get-all-agents)" "(coreptls/get-agents coreptls/agent-store)" "(get-agents agent-store)" "(new-agent 123 \\"Ronaldo\\" [\\"bills-questions\\"] [])\\r\\n(new-agent 987 \\"Pluto\\" [\\"rewards-question\\"] [])\\r\\n(new-agent 409 \\"Batman\\" [\\"rewards-question\\"] [\\"bills-questions\\"])\\r\\n(new-agent 786 \\"Belom\\" [\\"dota-questions\\"] [])\\r\\n(new-agent 367 \\"S\u00E3nic\\" [\\"running-questions\\"] [])" "(new-agent \\"123\\" \\"Ronaldo\\" [\\"bills-questions\\"] [])\\r\\n(new-agent \\"987\\" \\"Pluto\\" [\\"rewards-question\\"] [])\\r\\n(new-agent \\"409\\" \\"Batman\\" [\\"rewards-question\\"] [\\"bills-questions\\"])\\r\\n(new-agent \\"786\\" \\"Belom\\" [\\"dota-questions\\"] [])\\r\\n(new-agent \\"367\\" \\"S\u00E3nic\\" [\\"running-questions\\"] [])" "(get-agents agent-store)" "(get-all-agents)" "(for [x (get-all-agents)] (println x))" "(for [x (get-agents agent-store)] (println x))" "(empty? (filter \#(\= (\:id %) \\"456\\") (get-all-agents)))" "(filter \#(\= (\:id %) \\"456\\") (coreptls/get-all-agents))" "(filter \#(\= (\:id %) \\"456\\") (get-all-agents))" "(filter \#(\= (\:id %) \\"987\\") (get-all-agents))" " \\r\\n(coreptls/new-agent \\"123\\" \\"Ronaldo\\" [\\"bills-questions\\"] [])\\r\\n(coreptls/new-agent \\"987\\" \\"Pluto\\" [\\"rewards-question\\"] [])\\r\\n(coreptls/new-agent \\"409\\" \\"Batman\\" [\\"rewards-question\\"] [\\"bills-questions\\"])\\r\\n(coreptls/new-agent \\"786\\" \\"Belom\\" [\\"dota-questions\\"] [])\\r\\n(coreptls/new-agent \\"367\\" \\"S\u00E3nic\\" [\\"running-questions\\"] [])\\r\\n\\r\\n(coreptls/new-job \\"456\\"  \\"bills-questions\\" false)\\r\\n(coreptls/new-job \\"542\\" \\"bills-questions\\" true)\\r\\n(coreptls/new-job \\"142\\" \\"rewards-question\\" true)\\r\\n(coreptls/new-job \\"731\\" \\"rewards-question\\" false)\\r\\n(coreptls/new-job  \\"89\\" \\"dota-question\\" false)" "(job-request-by-agentid \\"123\\")\\r\\n(job-request-by-agentid \\"123\\")" "(get-jobs-by-working-agent-id (coreptls/get-all-jobs) (get-agent-by-id (coreptls/get-all-agents) \\"123\\"))" "(map-jobs-by-agent-skillset (get-jobs-by-working-agent-id (coreptls/get-all-jobs) (get-agent-by-id (coreptls/get-all-agents) \\"123\\")) (get-agent-by-id (coreptls/get-all-agents) \\"123\\"))" "(coreptls/new-agent \\"123\\" \\"Ronaldo\\" [\\"bills-questions\\"] [])\\r\\n(coreptls/new-agent \\"987\\" \\"Pluto\\" [\\"rewards-question\\"] [])\\r\\n(coreptls/new-agent \\"409\\" \\"Batman\\" [\\"rewards-question\\"] [\\"bills-questions\\"])\\r\\n(coreptls/new-agent \\"786\\" \\"Belom\\" [\\"dota-questions\\"] [])\\r\\n(coreptls/new-agent \\"367\\" \\"S\u00E3nic\\" [\\"running-questions\\"] [])\\r\\n\\r\\n(coreptls/new-job \\"456\\"  \\"bills-questions\\" false)\\r\\n(coreptls/new-job \\"542\\" \\"bills-questions\\" true)\\r\\n(coreptls/new-job \\"142\\" \\"rewards-question\\" true)\\r\\n(coreptls/new-job \\"731\\" \\"rewards-question\\" false)\\r\\n(coreptls/new-job  \\"89\\" \\"dota-question\\" false)\\r\\n\\r\\n(job-request-by-agentid \\"123\\")\\r\\n(job-request-by-agentid \\"123\\")" "(get-jobs-by-working-agent-id (coreptls/get-all-jobs) (get-agent-by-id (coreptls/get-all-agents) \\"123\\"))" "(map-jobs-by-agent-skillset (get-jobs-by-working-agent-id (coreptls/get-all-jobs) (get-agent-by-id (coreptls/get-all-agents) \\"123\\")) (get-agent-by-id (coreptls/get-all-agents) \\"123\\"))" "(flatten (into (\:primary-skillset (get-agent-by-id (coreptls/get-all-agents) \\"123\\")) (\:secondary-skillset (get-agent-by-id (coreptls/get-all-agents) \\"123\\"))))" "(flatten (into (\:primary-skillset (get-agent-by-id (coreptls/get-all-agents) \\"409\\")) (\:secondary-skillset (get-agent-by-id (coreptls/get-all-agents) \\"409\\"))))" "(coreptls/new-agent \\"123\\" \\"Ronaldo\\" [\\"bills-questions\\"] [])\\r\\n(coreptls/new-agent \\"987\\" \\"Pluto\\" [\\"rewards-question\\"] [])\\r\\n(coreptls/new-agent \\"409\\" \\"Batman\\" [\\"rewards-question\\"] [\\"bills-questions\\"])\\r\\n(coreptls/new-agent \\"786\\" \\"Belom\\" [\\"dota-questions\\"] [])\\r\\n(coreptls/new-agent \\"367\\" \\"S\u00E3nic\\" [\\"running-questions\\"] [])\\r\\n\\r\\n(coreptls/new-job \\"456\\"  \\"bills-questions\\" false)\\r\\n(coreptls/new-job \\"542\\" \\"bills-questions\\" true)\\r\\n(coreptls/new-job \\"142\\" \\"rewards-question\\" true)\\r\\n(coreptls/new-job \\"731\\" \\"rewards-question\\" false)\\r\\n(coreptls/new-job  \\"89\\" \\"dota-question\\" false)\\r\\n\\r\\n(job-request-by-agentid \\"409\\")\\r\\n(job-request-by-agentid \\"409\\")" "(flatten (into (\:primary-skillset (get-agent-by-id (coreptls/get-all-agents) \\"409\\")) (\:secondary-skillset (get-agent-by-id (coreptls/get-all-agents) \\"409\\"))))" "(get-jobs-by-working-agent-id (coreptls/get-all-jobs) (get-agent-by-id (coreptls/get-all-agents) \\"409\\"))" "(map \#({% (count (get-jobs-by-skill *1 %))}) *2)" "(map \#({1 2}) [1 2])" "(map \#({% 2}) [1 2])" "(map (fn [x] {x 2}) [1 2 3])" "(coreptls/new-agent \\"123\\" \\"Ronaldo\\" [\\"bills-questions\\"] [])\\r\\n(coreptls/new-agent \\"987\\" \\"Pluto\\" [\\"rewards-question\\"] [])\\r\\n(coreptls/new-agent \\"409\\" \\"Batman\\" [\\"rewards-question\\"] [\\"bills-questions\\"])\\r\\n(coreptls/new-agent \\"786\\" \\"Belom\\" [\\"dota-questions\\"] [])\\r\\n(coreptls/new-agent \\"367\\" \\"S\u00E3nic\\" [\\"running-questions\\"] [])\\r\\n\\r\\n(coreptls/new-job \\"456\\"  \\"bills-questions\\" false)\\r\\n(coreptls/new-job \\"542\\" \\"bills-questions\\" true)\\r\\n(coreptls/new-job \\"142\\" \\"rewards-question\\" true)\\r\\n(coreptls/new-job \\"731\\" \\"rewards-question\\" false)\\r\\n(coreptls/new-job  \\"89\\" \\"dota-question\\" false)\\r\\n\\r\\n(job-request-by-agentid \\"409\\")\\r\\n(job-request-by-agentid \\"409\\")" "(map-jobs-by-agent-skillset (get-jobs-by-working-agent-id (coreptls/get-all-jobs) (get-agent-by-id (coreptls/get-all-agents) \\"409\\")) (get-agent-by-id (coreptls/get-all-agents) \\"409\\"))" "(job-request-by-agentid \\"409\\")" "(map-jobs-by-agent-skillset (get-jobs-by-working-agent-id (coreptls/get-all-jobs) (get-agent-by-id (coreptls/get-all-agents) \\"409\\")) (get-agent-by-id (coreptls/get-all-agents) \\"409\\"))" "(f/fail derror/no-queued-jobs-for-skillset)" "(f/if-let-failed? [x (f/fail derror/no-queued-jobs-for-skillset)] (println \\"ronaldo\\") (println \\"xablau\\"))" "(f/if-let-failed? [x (f/fail derror/no-queued-jobs-for-skillset)] (f/message x)(println \\"xablau\\"))" "(f/if-let-failed? [x *1] (println \\"ronaldo\\")(println \\"xablau\\"))" "(f/if-let-failed? [x (f/fail derror/agent-doesnot-exist)] (f/message x)(println \\"xablau\\"))" "(f/if-let-failed? [x *1] (println \\"ronaldo\\")(println \\"xablau\\"))" "(f/fail derror/no-queued-jobs-for-skillset)" "(f/message (f/fail derror/no-queued-jobs-for-skillset))" "(dissoc {\:a 1 \:b 2 \:c 3} \:b)" "(dissoc (\:message (f/fail derror/no-queued-jobs-for-skillset)) \:fail?)" "(try\\n  (do\\n    (f/fail derror/no-queued-jobs-for-skillset)\\n    (println \\"ronaldo\\")))\\n(catch (println \\"ronaldo\\"))" "(try\\r\\n     (do\\r\\n       (f/fail derror/no-queued-jobs-for-skillset)\\r\\n       (println \\"ronaldo\\"))\\r\\n   (catch (println \\"ronaldo\\")))" "(try\\r\\n        (do\\r\\n          (f/fail derror/no-queued-jobs-for-skillset)\\r\\n          (println \\"ronaldo\\"))\\r\\n      (catch Exception e (println e)))" "(try\\n  (do\\r\\n    (throw (f/fail derror/no-queued-jobs-for-skillset))    \\r\\n    (println \\"ronaldo\\"))\\r\\n  (catch Exception e (println e)))" "(try\\r\\n  (do\\r\\n    (throw  derror/no-queued-jobs-for-skillset)\\r\\n    (println \\"ronaldo\\"))\\r\\n  (catch Exception e (println e)))" "(try\\r\\n  (do\\r\\n    (throw (Exception. (f/fail derror/no-queued-jobs-for-skillset)))\\r\\n    (println \\"ronaldo\\"))\\r\\n  (catch Exception e (println e)))" "  (coreptls/clean-all-jobs)\\r\\n  (coreptls/clean-all-agents)\\r\\n  \\r\\n  (coreptls/new-agent \\"260\\" \\"BoJack Horseman\\" [\\"bills-questions\\"] [])\\r\\n  (coreptls/new-agent \\"c88\\"  \\"Mr. Peanut Butter\\" [\\"rewards-question\\"] [\\"bills-questions\\"])\\r\\n  \\r\\n  (coreptls/new-job \\"c36\\" \\"rewards-question\\" false)\\r\\n  (coreptls/new-job \\"864\\" \\"bills-questions\\" false)\\r\\n  (coreptls/new-job \\"1d2\\" \\"bills-questions\\" true)\\r\\n  \\r\\n  (cr/job-request-by-agentid  \\"260\\")\\r\\n  (cr/job-request-by-agentid  \\"260\\")" "(cr/get-jobs-done-by-working-agent-id (coreptls/get-all-jobs) \\"260\\")" "(coreptls/get-all-jobs)" "(reduce (fn [x y z] (println x\\"-\\"y\\"-\\"z)) [1 2 3] [4 5 6] [7 8 9])" "(reduce (fn [x y] (println x\\"-\\"y\\"-\\"z)) [1 2 3] [4 5 6])" "(reduce (fn [x y] (println x\\"-\\"y)) [1 2 3] [4 5 6])" "(map (fn [x y z] (println x\\"-\\"y\\"-\\"z)) [1 2 3] [4 5 6] [7 8 9])" "(map (fn [result-map skill count] (\= ('skill result-map) count)) [\\"4\\" 7 \\"5\\" 8 \\"6\\" 9] [\\"4\\" \\"5\\" \\"6\\"] [7 8 9])" "(map (fn [result-map skill count] (println ('skill result-map)\\"-\\"skill\\"-\\"count) (\= ('skill result-map) count)) [\\"4\\" 7 \\"5\\" 8 \\"6\\" 9] [\\"4\\" \\"5\\" \\"6\\"] [7 8 9])" "(map (fn [result-map skill count] (println ('skill result-map)\\"-\\"skill\\"-\\"count) (\= '(skill result-map) count)) [\\"4\\" 7 \\"5\\" 8 \\"6\\" 9] [\\"4\\" \\"5\\" \\"6\\"] [7 8 9])" "(map (fn [result-map skill count] (println result-map\\"-\\"skill\\"-\\"count) (\= ('skill result-map) count)) [\\"4\\" 7 \\"5\\" 8 \\"6\\" 9] [\\"4\\" \\"5\\" \\"6\\"] [7 8 9])" "  (coreptls/clean-all-jobs)\\r\\n  (coreptls/clean-all-agents)\\r\\n  \\r\\n  (coreptls/new-agent \\"260\\" \\"BoJack Horseman\\" [\\"bills-questions\\"] [])\\r\\n  (coreptls/new-agent \\"c88\\"  \\"Mr. Peanut Butter\\" [\\"rewards-question\\"] [\\"bills-questions\\"])\\r\\n  \\r\\n  (coreptls/new-job \\"c36\\" \\"rewards-question\\" false)\\r\\n  (coreptls/new-job \\"864\\" \\"bills-questions\\" false)\\r\\n  (coreptls/new-job \\"1d2\\" \\"bills-questions\\" true)\\r\\n  \\r\\n  (cr/job-request-by-agentid  \\"c88\\")\\r\\n  (cr/job-request-by-agentid  \\"c88\\")\\r\\n  (cr/job-request-by-agentid  \\"c88\\")" "(map (fn [result-map skill count] (\= ('skill result-map) count)) \\r\\n                                           (cr/map-jobs-by-agent-skillset\\r\\n                                             (coreptls/get-all-jobs)\\r\\n                                             (cr/get-agent-by-id (coreptls/get-all-agents) \\"260\\")) \\r\\n                                           [\\"rewards-question\\" \\"bills-questions\\"]\\r\\n                                           [1 1])" "(cr/map-jobs-by-agent-skillset\\r\\n                                             (coreptls/get-all-jobs)\\r\\n                                             (cr/get-agent-by-id (coreptls/get-all-agents) \\"260\\"))" "(coreptls/clean-all-jobs)" "  (coreptls/clean-all-jobs)\\r\\n  (coreptls/clean-all-agents)\\r\\n  \\r\\n  (coreptls/new-agent \\"260\\" \\"BoJack Horseman\\" [\\"bills-questions\\"] [])\\r\\n  (coreptls/new-agent \\"c88\\"  \\"Mr. Peanut Butter\\" [\\"rewards-question\\"] [\\"bills-questions\\"])\\r\\n  \\r\\n  (coreptls/new-job \\"c36\\" \\"rewards-question\\" false)\\r\\n  (coreptls/new-job \\"864\\" \\"bills-questions\\" false)\\r\\n  (coreptls/new-job \\"1d2\\" \\"bills-questions\\" true)\\r\\n  \\r\\n  (cr/job-request-by-agentid  \\"c88\\")\\r\\n  (cr/job-request-by-agentid  \\"c88\\")\\r\\n  (cr/job-request-by-agentid  \\"c88\\")" "(cr/map-jobs-by-agent-skillset\\r\\n                                             (coreptls/get-all-jobs)\\r\\n                                             (cr/get-agent-by-id (coreptls/get-all-agents) \\"260\\"))" "(coreptls/get-all-jobs)" "  (coreptls/clean-all-jobs)\\r\\n  (coreptls/clean-all-agents)\\r\\n  \\r\\n  (coreptls/new-agent \\"260\\" \\"BoJack Horseman\\" [\\"bills-questions\\"] [])\\r\\n  (coreptls/new-agent \\"c88\\"  \\"Mr. Peanut Butter\\" [\\"rewards-question\\"] [\\"bills-questions\\"])\\r\\n  \\r\\n  (coreptls/new-job \\"c36\\" \\"rewards-question\\" false)\\r\\n  (coreptls/new-job \\"864\\" \\"bills-questions\\" false)\\r\\n  (coreptls/new-job \\"1d2\\" \\"bills-questions\\" true)\\r\\n  \\r\\n  (cr/job-request-by-agentid  \\"c88\\")\\r\\n  (cr/job-request-by-agentid  \\"c88\\")\\r\\n  (cr/job-request-by-agentid  \\"c88\\")" "(cr/map-jobs-by-agent-skillset\\r\\n                                             (coreptls/get-all-jobs)\\r\\n                                             (cr/get-agent-by-id (coreptls/get-all-agents) \\"260\\"))" "(cr/map-jobs-by-agent-skillset\\r\\n                                             (coreptls/get-all-jobs)\\r\\n                                             (cr/get-agent-by-id (coreptls/get-all-agents) \\"c88\\"))" "  (coreptls/clean-all-jobs)\\r\\n  (coreptls/clean-all-agents)\\r\\n  \\r\\n  (coreptls/new-agent \\"260\\" \\"BoJack Horseman\\" [\\"bills-questions\\"] [])\\r\\n  (coreptls/new-agent \\"c88\\"  \\"Mr. Peanut Butter\\" [\\"rewards-question\\"] [\\"bills-questions\\"])\\r\\n  \\r\\n  (coreptls/new-job \\"c36\\" \\"rewards-question\\" false)\\r\\n  (coreptls/new-job \\"864\\" \\"bills-questions\\" false)\\r\\n  (coreptls/new-job \\"1d2\\" \\"bills-questions\\" true)\\r\\n  \\r\\n  (cr/job-request-by-agentid  \\"c88\\")\\r\\n  (cr/job-request-by-agentid  \\"c88\\")\\r\\n  (cr/job-request-by-agentid  \\"c88\\")" "(map (fn [result-map skill count] (\= ('skill result-map) count)) \\r\\n                                           (cr/get-agent-stats \\"260\\")\\r\\n                                           [\\"rewards-question\\" \\"bills-questions\\"]\\r\\n                                           [1 1])" "(cr/get-agent-stats \\"260\\")" "(map (fn [result-map skill count] (\= ('skill result-map) count)) \\r\\n                                              (cr/get-agent-stats \\"c88\\")\\r\\n                                              [\\"rewards-question\\" \\"bills-questions\\"]\\r\\n                                              [1 1])" "(map (fn [result-map skill count] (\= (get result-map skill) count)) \\r\\n                                              (cr/get-agent-stats \\"260\\")\\r\\n                                              [\\"rewards-question\\" \\"bills-questions\\"]\\r\\n                                              [1 1])" "(map (fn [result-map skill count] (\= (get result-map skill) count)) \\r\\n                                                 (cr/get-agent-stats \\"c88\\")\\r\\n                                                 [\\"rewards-question\\" \\"bills-questions\\"]\\r\\n                                                 [1 1])" "  (coreptls/clean-all-jobs)\\r\\n  (coreptls/clean-all-agents)\\r\\n  \\r\\n  (coreptls/new-agent \\"260\\" \\"BoJack Horseman\\" [\\"bills-questions\\"] [])\\r\\n  (coreptls/new-agent \\"c88\\"  \\"Mr. Peanut Butter\\" [\\"rewards-question\\"] [\\"bills-questions\\"])\\r\\n  \\r\\n  (coreptls/new-job \\"c36\\" \\"rewards-question\\" false)\\r\\n  (coreptls/new-job \\"864\\" \\"bills-questions\\" false)\\r\\n  (coreptls/new-job \\"1d2\\" \\"bills-questions\\" true)\\r\\n  \\r\\n  (cr/job-request-by-agentid  \\"c88\\")\\r\\n  (cr/job-request-by-agentid  \\"c88\\")\\r\\n  (cr/job-request-by-agentid  \\"c88\\")" "(map (fn [result-map skill count] (\= (get result-map skill) count)) \\r\\n                                           (cr/get-agent-stats \\"c88\\")\\r\\n                                           [\\"rewards-question\\" \\"bills-questions\\"]\\r\\n                                           [0 1])" "(some \#(true? %) (map (fn [result-map skill count] (\= (get result-map skill) count)) \\r\\n                                           (cr/get-agent-stats \\"c88\\")\\r\\n                                           [\\"rewards-question\\" \\"bills-questions\\"]\\r\\n                                           [0 1]))" "(some \#(false? %) (map (fn [result-map skill count] (\= (get result-map skill) count)) \\r\\n                                           (cr/get-agent-stats \\"c88\\")\\r\\n                                           [\\"rewards-question\\" \\"bills-questions\\"]\\r\\n                                           [0 1]))" "(filter \#(false? %) (map (fn [result-map skill count] (\= (get result-map skill) count)) \\r\\n                                              (cr/get-agent-stats \\"c88\\")\\r\\n                                              [\\"rewards-question\\" \\"bills-questions\\"]\\r\\n                                              [0 1]))" "(empty? (filter \#(false? %) (map (fn [result-map skill count] (\= (get result-map skill) count)) \\r\\n                                                 (cr/get-agent-stats \\"c88\\")\\r\\n                                                 [\\"rewards-question\\" \\"bills-questions\\"]\\r\\n                                                 [0 1])))" "  (coreptls/clean-all-jobs)\\r\\n  (coreptls/clean-all-agents)\\r\\n  \\r\\n  (coreptls/new-agent \\"260\\" \\"BoJack Horseman\\" [\\"bills-questions\\"] [])\\r\\n  (coreptls/new-agent \\"c88\\"  \\"Mr. Peanut Butter\\" [\\"rewards-question\\"] [\\"bills-questions\\"])\\r\\n  \\r\\n  (coreptls/new-job \\"c36\\" \\"rewards-question\\" false)\\r\\n  (coreptls/new-job \\"864\\" \\"bills-questions\\" false)\\r\\n  (coreptls/new-job \\"1d2\\" \\"bills-questions\\" true)\\r\\n  \\r\\n  (cr/job-request-by-agentid  \\"c88\\")\\r\\n  (cr/job-request-by-agentid  \\"c88\\")\\r\\n  (cr/job-request-by-agentid  \\"c88\\")\\r\\n  (cr/job-request-by-agentid  \\"260\\")\\r\\n  (cr/job-request-by-agentid  \\"260\\")" "(cr/get-agent-stats \\"260\\")"]
eclipse.preferences.version=1
